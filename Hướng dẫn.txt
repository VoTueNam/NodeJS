Cài đặt express
--> npm install express
trang chủ: https://expressjs.com

Cài đặt Nodemon --> lắng nghe sự thay đổi trong source code
https://www.npmjs.com/package/nodemon

npm install -g nodemon --> Cài vào máy vĩnh viễn luon

npm install nodemon --save-dev --> cài vào dev environment

Chỉnh sửa script trong package.json thì có thể chạy nodemon trong npm cmd (nodemon --inspect index.js)
- Flag:  --inspect có thể debug trên browser --> click vào dòng nào thì đặt check point vào dòng đó dùng để debug

install morgan: npm i morgan --> cấu hình vào file index.js - app.use(morgan('combined'))

Add source lên github --> tạo file .gitignore
git init
git add .  (add tất cả vào, add file nào thì để tên file đó)
git commit -m "Chèn message vào đây"
git remote add origin https://github.com/VoTueNam/NodeJS.git (sửa đường dẫn thành github của bạn)
git push -u origin main
git push --set-upstream origin master or (main)

Cài handlebars --> npm install express-handlebars
const hbs = require('express-handlebars')

app.engine('handlebars', hbs.engine());
app.set('view engine', 'handlebars');

Cách public folder img để xem đc hình ảnh trên server
app.use(express.static(path.join(__dirname, 'public')))

Cài Scss node --> npm install node-sass --save-dev
Custom script --> watch = "node-sass --watch src/resources/scss/app.scss src/public/css/app.css"
Flag watch là nó đang lắng nghe

--> Đặt biến trong file _variables.scss --> thì app.scss sẽ nhận những cái giá trị lưu trong biến đó
để app.scss nó hiểu đc cần : @import "variables"; ở đầu file

Thêm file nodemon.json ở ngoài thư mục gốc --> add các tên extension để nó lắng nghe
ví dụ: 
{
    "ext": "js json scss hbs"
}
--> cách nhau bởi dấu cách, nodemon sẽ lắng nghe sự thay đổi trg những file có đuôi này


Boostrap 4: https://getbootstrap.com/docs/4.0/getting-started/introduction/
copy css và js link vào trg main html của handlebars

basic route - xem code thôi

Server mặc định khi request thì sẽ trả về GET method, trừ khi đc chỉ định

Query parameter: trên URL sẽ có các parameter thì queue nó sẽ có dạng
Bắt đầu bằng ?parem=value và có thể kết nối nhiều biến với nhau bằng &&

Form behavior - lấy name của 1 cái input ở trong form, đính nó trên URL thành queue parameter
Với nội dung của queue parameter là value của nội dung đc nhập vào thẻ input
--> Ngoài ra có thể chỉ định method cho form (thành POST chẳng hạn) mặc định method là GET
--> Ngoài ra còn chỉnh sửa action trong form để nó chỉ định URL sau khi submit - mặc định khi ko nhập thì nó sẽ trả về đúng page hiện thời

Form Post thì Express nó sẽ nhận giá trị thông qua biến body:
req.body (get thì dùng req.query) Do express từ v4.6 trở đi có tích hợp body-parser nên có thể xài đc luôn
Lưu ý: cần gọi midlleware để nhận giá trị thành công (xem code) - Xem file index.js

Triển khai mô hình MVC vào code
- Tạo 2 thư mục routes và app\controller
- Trong routes thì triển khai route - kèm GET POST gì gì đó - và ngoài ra còn 1 thằng index.js trong route để quảng lý chung
- Trong controller thì triển khai class để tạo các function cho routes gọi 

Chuẩn hóa code bằng thư viện
- prettier: format code để đẹp hơn - sửa code lại đẹp hơn trước khi upload lên git
- Vào sửa script trong package.json để chạy auto prettier
- Cấu hình lint-staged để nó tự động sửa code prettier khi có code đc add vào git
- Có 1 thằng husky trong package.json, chỗ pre-commit có nghĩa là khi commit code nó sẽ tự động làm đẹp (bằng lệnh lint-staged)

Sử dụng mongoDB
- Xây dựng model trong MVC
- Cài mongoose - Object model driver: nó là một cái công cụ mô hình hóa cho thằng mongoDB
- mongoose nó sp có promises lẫn callbacks
- Thôi xem code đi :) để connect
- Tạo folder model rồi tạo course để quản lý model
- Để đọc được collection cần có model, model nào cũng đọc đc bất kỳ collection nào trong file
- Model ghi thì sẽ ghi vào collection đc chỉ định, nếu chưa có thì tạo mới luôn

Read database: Xem SiteController và Home handlebars
Set up chuyển hướng trong html -> Sau đó viết route và controller


